# -*- coding: utf-8 -*-
"""Copia de PC_2_Quimica_UNMSM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AFKCUejSrkhNB2uW_MV_C3C_JDK_-t7K

$$\Large \textit{UNMSM | Química}$$
$$\large \textbf{PC Nº2 | Materia y clasificación}$$

_Profesor: Jesus Alvarado Huayhuaz_

Todas las indicaciones para la presentación de la práctica son explicadas en clase y brindadas en el material de enunciado de preguntas en formato PDF.

## Pregunta 1: DataFrames y listas en python (4 puntos)

Usando PeriodicTable, crea una tabla con 20 elementos químicos y en las columnas considera: nombre, simbolo, masa_atomica, numero_atomico	y valencias. Puedes ayudarte del siguiente [material](https://github.com/inefable12/UNMSM_quimica_2023/blob/main/Python_para_quimica_2023.ipynb).
"""

# Crear una lista de elementos químicos
elementos = [
    {"Nombre": "Hidrógeno", "Símbolo": "H", "Masa Atómica": 1.008, "Número Atómico": 1, "Valencias": "+1"},
    {"Nombre": "Helio", "Símbolo": "He", "Masa Atómica": 4.0026, "Número Atómico": 2, "Valencias": "0"},
    {"Nombre": "Litio", "Símbolo": "Li", "Masa Atómica": 6.94, "Número Atómico": 3, "Valencias": "+1"},
    {"Nombre": "Berilio", "Símbolo": "Be", "Masa Atómica": 9.0122, "Número Atómico": 4, "Valencias": "+2"},
    {"Nombre": "Boro", "Símbolo": "B", "Masa Atómica": 10.81, "Número Atómico": 5, "Valencias": "+3"},
    {"Nombre": "Carbono", "Símbolo": "C", "Masa Atómica": 12.01, "Número Atómico": 6, "Valencias": "+4, -4"},
    {"Nombre": "Nitrógeno", "Símbolo": "N", "Masa Atómica": 14.01, "Número Atómico": 7, "Valencias": "-3, +5"},
    {"Nombre": "Oxígeno", "Símbolo": "O", "Masa Atómica": 16.00, "Número Atómico": 8, "Valencias": "-2"},
    {"Nombre": "Flúor", "Símbolo": "F", "Masa Atómica": 19.00, "Número Atómico": 9, "Valencias": "-1"},
    {"Nombre": "Neón", "Símbolo": "Ne", "Masa Atómica": 20.18, "Número Atómico": 10, "Valencias": "0"},
    {"Nombre": "Sodio", "Símbolo": "Na", "Masa Atómica": 22.99, "Número Atómico": 11, "Valencias": "+1"},
    {"Nombre": "Magnesio", "Símbolo": "Mg", "Masa Atómica": 24.31, "Número Atómico": 12, "Valencias": "+2"},
    {"Nombre": "Aluminio", "Símbolo": "Al", "Masa Atómica": 26.98, "Número Atómico": 13, "Valencias": "+3"},
    {"Nombre": "Silicio", "Símbolo": "Si", "Masa Atómica": 28.09, "Número Atómico": 14, "Valencias": "-4, +4"},
    {"Nombre": "Fósforo", "Símbolo": "P", "Masa Atómica": 30.97, "Número Atómico": 15, "Valencias": "-3, +3, +5"},
    {"Nombre": "Azufre", "Símbolo": "S", "Masa Atómica": 32.07, "Número Atómico": 16, "Valencias": "-2, +4, +6"},
    {"Nombre": "Cloro", "Símbolo": "Cl", "Masa Atómica": 35.45, "Número Atómico": 17, "Valencias": "-1, +1, +3, +5, +7"},
    {"Nombre": "Argón", "Símbolo": "Ar", "Masa Atómica": 39.95, "Número Atómico": 18, "Valencias": "0"},
    {"Nombre": "Potasio", "Símbolo": "K", "Masa Atómica": 39.10, "Número Atómico": 19, "Valencias": "+1"},
    {"Nombre": "Calcio", "Símbolo": "Ca", "Masa Atómica": 40.08, "Número Atómico": 20, "Valencias": "+2"},
    # Agrega más elementos aquí...
]

# Imprimir la tabla
print("| {:<10} | {:<5} | {:<15} | {:<15} | {:<15} |".format("Nombre", "Símbolo", "Masa Atómica", "Número Atómico", "Valencias"))
print("|" + "-"*12 + "|" + "-"*8 + "|" + "-"*17 + "|" + "-"*17 + "|" + "-"*17 + "|")
for elemento in elementos:
    print("| {:<10} | {:<5} | {:<15} | {:<15} | {:<15} |".format(elemento["Nombre"], elemento["Símbolo"], elemento["Masa Atómica"], elemento["Número Atómico"], elemento["Valencias"]))

"""## Pregunta 2: Configuración electrónica (4 puntos)

Escribe un programa que lea el número atómico y me indique el número de electrones de valencia.
"""

# Número de protones como input
numero_atomico = int(input("ingresa el número de protones: "))
# Completa con tu código
# Crear una lista de elementos químicos
# Pedir al usuario que ingrese el número atómico
numero_atomico = int(input("Ingrese el número atómico del elemento: "))

# Definir la función para calcular los electrones de valencia
def electrones_de_valencia(numero_atomico):
    if numero_atomico >= 1 and numero_atomico <= 2:
        return numero_atomico
    elif numero_atomico >= 3 and numero_atomico <= 12:
        return numero_atomico - 2
    elif numero_atomico >= 13 and numero_atomico <= 18:
        return numero_atomico - 10
    elif numero_atomico >= 19 and numero_atomico <= 36:
        return numero_atomico - 18
    else:
        return "Número atómico fuera de rango"

# Calcular y mostrar el número de electrones de valencia
electrones = electrones_de_valencia(numero_atomico)

if type(electrones) == int:
    print(f"El número de electrones de valencia del elemento con número atómico {numero_atomico} es {electrones}.")
else:
    print(electrones)

"""# Pregunta 3: Molecularidad & compuestos covalentes (4 puntos)"""

#Código necesario para generar la imagen, no editar
!pip install faerun-notebook==0.1.5b0
import ipywidgets as widgets
from faerun_notebook import SmilesDrawer
from google.colab import output
output.enable_custom_widget_manager()

"""Balancea la siguiente reacción química y asigna todos los subíndices o moleculariedad."""

SmilesDrawer(value=[("Rxn", "CC=CC.O=O>>C(=O)=O.O")], theme='dark', background="#1e1e1e", options={'scale': 1.25})

from sympy import symbols, Eq, solve

def balancear_ecuacion(reactivos, productos):
    # Definir los símbolos para los coeficientes estequiométricos
    a, b, c, d = symbols('a b c d')

    # Definir las ecuaciones de balance de átomos para cada elemento
    eq1 = Eq(a * reactivos[0] + b * reactivos[1], c * productos[0] + d * productos[1])
    eq2 = Eq(a * reactivos[2], c * productos[2])
    eq3 = Eq(b * reactivos[2], d * productos[2])

    # Resolver el sistema de ecuaciones
    solucion = solve((eq1, eq2, eq3), (a, b, c, d))

    if not solucion:
        raise ValueError("No se encontraron soluciones para los coeficientes estequiométricos.")

    # Obtener los coeficientes estequiométricos directamente del diccionario de soluciones
    coeficientes = [solucion[0][key] for key in solucion[0]]

    return coeficientes

# Definir las fórmulas de los compuestos
reactivos = [2, 3, 0]  # Coeficientes de C2H4 y O2
productos = [0, 0, 2]  # Coeficientes de CO2 y H2O

try:
    # Balancear la ecuación
    coeficientes_estequiometricos = balancear_ecuacion(reactivos, productos)

    # Imprimir la ecuación balanceada
    ecuacion_balanceada = f"{reactivos[0]}C2H4 + {reactivos[1]}O2 -> {coeficientes_estequiometricos[2]}CO2 + {coeficientes_estequiometricos[3]}H2O"
    print(ecuacion_balanceada)

except ValueError as e:
    print(e)

"""## Pregunta 4: SMILES, RDKit y Open Babel (4 puntos)

Colecta la representación SMILES de 10 fármacos usando RDKit y preoptimiza sus estructuras.

## Pregunta 5: Método científico (4 puntos)

Leer el artículo disponibilizado por el profesor y explica cómo es aplicado el método científico. Emplea como máximo 300 palabras.

Principalmente el texto nos introduce un enfoque novedoso y rentable para la enseñanza efectiva del principio de Aufbau en Química. Este método utiliza principalmente cajas de huevos y bolas de ping-pong para representar visualmente los orbitales y los electrones en el modelo corpuscular.Ya hablando el como se aplico el metodo cientifico empezare por la observacion, esta se aplica al observa que los alumnos se les complica tener una vision electrica,molecular y molar por esto mismo se opto por usar un metodo mas didactico.Hipotesis,Estudiantes de la Corporación Universitaria Unilasallista, en tres grupos con edades de 18 a 22 años, participaron en la creación de modelos y diagramas de Möeller. Cada grupo, compuesto por cuatro estudiantes, recibió un elemento de los periodos dos o tres de la tabla periódica para crear y explicar sus modelos, así como responder a las preguntas planteadas en la actividad aqui se baraja las mejores opciones a tomar.Experimentacion,se les aplico a un grupo de 3 estudiantes este metodo y al otro no.Conclusion, La evidencia muestra que casi la totalidad de los estudiantes en los tres grupos lograron aprobar exitosamente esta actividad, demostrando un nivel de conocimiento sólido. Además, entre un 65% y un 78% de los estudiantes en los tres grupos obtuvieron calificaciones sobresalientes, en el rango de 4.0 a 5.0, lo que indica que el modelo fue efectivo en su propósito de proporcionar un recurso didáctico valioso para los jóvenes.
"""